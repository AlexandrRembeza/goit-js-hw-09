{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGeC,SAASC,cAAc,SAC/BC,iBAAiB,UAIxB,SAAqCC,GACnCA,EAAEC,iBACF,MACEC,UAAUC,OAAEA,EAAMC,KAAEA,EAAIC,MAAEA,IACxBL,EAAEM,cAEN,GAAIH,EAAOI,MAAQ,GAAKH,EAAKG,MAAQ,GAAKF,EAAME,MAAQ,EACtD,OAAOC,MAAM,qCAGa,MAAtBC,EAAa,GACF,IAAIC,SAASV,EAAEM,eAEvBK,SAAQ,CAACJ,EAAOK,IAAUH,EAAWG,GAAQC,OAAON,KAE7DP,EAAEM,cAAcQ,QA6ClB,UAAuBX,OAAEA,EAAME,MAAEA,EAAKD,KAAEA,IACtC,IAAIW,EAAQ,EACRC,EAAYX,EAEhBY,YAAW,KACaC,KAAKC,SAAW,GAGpCC,QAAQC,QAAQ,uBAAqBN,QAAcC,OAAeM,KAAEC,GAIpEH,QAAQI,OAAO,sBAAoBT,QAAcC,OAAeS,MAAEC,GAKpEV,GAAaZ,EACbW,GAAS,EAETY,EAAUC,aAAY,MAyC1B,SAAoBC,EAAcC,GAChC,GAAID,GAAgBC,EAClBC,cAAcJ,GA1CZK,CAAWjB,EAAOZ,GAEIe,KAAKC,SAAW,GAGpCC,QAAQC,QAAQ,uBAAqBN,QAAcC,OAAeM,KAAEC,GAIpEH,QAAQI,OAAO,sBAAoBT,QAAYC,OAAeS,MAAEC,GAKlEV,GAAaZ,EACbW,GAAS,IACRX,KACFC,GAjFH4B,CAAcxB,MAnBhB,IAAIkB,EAAU,KAuGd,SAASJ,EAAmBhB,GAC1B2B,EAAAvC,GAASwC,OAAOC,QAAQ,GAAG7B,IAAS,CAClC8B,MAAO,QACPC,SAAU,YACVC,cAAc,EACdC,QAAS,QACTC,SAAU,SAId,SAASf,EAAkBnB,GACzB2B,EAAAvC,GAASwC,OAAOO,QAAQ,GAAGnC,IAAS,CAClC8B,MAAO,QACPC,SAAU,YACVC,cAAc,EACdC,QAAS,QACTC,SAAU","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst formEL = document.querySelector('.form');\nformEL.addEventListener('submit', getFormValuesAndGetMessages);\n\nlet timerId = null;\n\nfunction getFormValuesAndGetMessages(e) {\n  e.preventDefault();\n  const {\n    elements: { amount, step, delay },\n  } = e.currentTarget;\n\n  if (amount.value < 0 || step.value < 0 || delay.value < 0) {\n    return alert(`Все числа должны быть больше нуля`);\n  }\n\n  const formValues = {};\n  const formData = new FormData(e.currentTarget);\n\n  formData.forEach((value, name) => (formValues[name] = Number(value)));\n\n  e.currentTarget.reset();\n\n  createPromise(formValues);\n}\n\n// function createPromise({ amount, delay, step }) {\n//   return setTimeout(() => {\n//     for (let i = 1; i <= amount; i += 1) {\n//       let shouldResolve = Math.random() > 0.3;\n\n//       if (shouldResolve) {\n//         Promise.resolve(`✅ Fulfilled promise ${i} in ${delay}ms`).then(\n//           value => {\n//             setTimeout(() => {\n//               Notiflix.Notify.success(`${value}`, {\n//                 width: '400px',\n//                 position: 'right-top',\n//                 clickToClose: true,\n//                 svgSize: '120px',\n//                 fontSize: '18px',\n//               });\n//             }, step);\n//           }\n//         );\n//       } else {\n//         Promise.reject(`❌ Rejected promise ${i} in ${delay}ms`).catch(\n//           value => {\n//             setTimeout(() => {\n//               Notiflix.Notify.failure(`${value}`, {\n//                 width: '400px',\n//                 position: 'right-top',\n//                 clickToClose: true,\n//                 svgSize: '120px',\n//                 fontSize: '18px',\n//               });\n//             }, step);\n//           }\n//         );\n//       }\n\n//       delay += step;\n//     }\n//   }, delay);\n// }\n\nfunction createPromise({ amount, delay, step }) {\n  let count = 1;\n  let timeDelay = delay;\n\n  setTimeout(() => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      Promise.resolve(`✅ Fulfilled promise ${count} in ${timeDelay}ms`).then(\n        showResolveMessage\n      );\n    } else {\n      Promise.reject(`❌ Rejected promise ${count} in ${timeDelay}ms`).catch(\n        showRejectMessage\n      );\n    }\n\n    timeDelay += step;\n    count += 1;\n\n    timerId = setInterval(() => {\n      checkCount(count, amount);\n\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        Promise.resolve(`✅ Fulfilled promise ${count} in ${timeDelay}ms`).then(\n          showResolveMessage\n        );\n      } else {\n        Promise.reject(`❌ Rejected promise ${count} in ${timeDelay}ms`).catch(\n          showRejectMessage\n        );\n      }\n\n      timeDelay += step;\n      count += 1;\n    }, step);\n  }, delay);\n}\n\nfunction showResolveMessage(value) {\n  Notiflix.Notify.success(`${value}`, {\n    width: '400px',\n    position: 'right-top',\n    clickToClose: true,\n    svgSize: '120px',\n    fontSize: '18px',\n  });\n}\n\nfunction showRejectMessage(value) {\n  Notiflix.Notify.failure(`${value}`, {\n    width: '400px',\n    position: 'right-top',\n    clickToClose: true,\n    svgSize: '120px',\n    fontSize: '18px',\n  });\n}\n\nfunction checkCount(currentCount, amountOfCounts) {\n  if (currentCount >= amountOfCounts) {\n    clearInterval(timerId);\n    return;\n  }\n}\n"],"names":["$eWCmQ","parcelRequire","document","querySelector","addEventListener","e","preventDefault","elements","amount","step","delay","currentTarget","value","alert","formValues","FormData","forEach","name","Number","reset","count","timeDelay","setTimeout","Math","random","Promise","resolve","then","$47d4ff9957288465$var$showResolveMessage","reject","catch","$47d4ff9957288465$var$showRejectMessage","$47d4ff9957288465$var$timerId","setInterval","currentCount","amountOfCounts","clearInterval","$47d4ff9957288465$var$checkCount","$47d4ff9957288465$var$createPromise","$parcel$interopDefault","Notify","success","width","position","clickToClose","svgSize","fontSize","failure"],"version":3,"file":"03-promises.440686e4.js.map"}